version: '3.8'

services:
  db:
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: mydatabase
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./pg_hba.conf:/etc/postgresql/pg_hba.conf
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    networks:
      - app
      

  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: 'rabbitmq-local'
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
      - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
    networks:
      - rabbitmq_net

  user_service:
    container_name: user_service
    build:
      context: .
      dockerfile: Dockerfile
    image: user_service_image 
    environment:
      DB_HOST: microservicesgorabbitmq-db-1
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: userDB
      DB_PORT: 5432
      DB_SSLMODE: disable
      WAIT_HOSTS: microservicesgorabbitmq-db-1:5432
      WAIT_HOSTS_TIMEOUT: 30
      WAIT_SLEEP_INTERVAL: 10
      WAIT_HOST_CONNECT_TIMEOUT: 30
    depends_on:
      - rabbitmq
      - db
      - adminer
    ports:
      - "3000:3000"
    volumes:
      - .:/go/src/app
    networks:
      - app
      - rabbitmq_net
    command: /server  # Specify the command to start the user service

  merchant_service:
    container_name: merchant_service
    build:
      context: .
      dockerfile: Dockerfile
    image: merchant_service_image
    environment:
      RABBITMQ_HOST: host.docker.internal  # Connect to RabbitMQ running on the host machine
      RABBITMQ_PORT: 5672  # RabbitMQ port
      RABBITMQ_USER: guest
      RABBITMQ_PASSWORD: guest
      RABBITMQ_QUEUE: pubsub  # Specify the queue name
    depends_on:
      - rabbitmq
    ports:
      - "3001:3001"
    volumes:
      - .:/go/src/app
    networks:
      - app
    command: /server

volumes:
  db-data:

networks:
  rabbitmq_net:
    driver: bridge
  app:
    driver: bridge
