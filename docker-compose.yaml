version: '3.8'

services:
  db:
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: mydatabase
    volumes:
      - db-data:/var/lib/postgresql/data
    ports:
      - 5432:5432

  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: 'rabbitmq-local'
    ports:
        - 5672:5672
        - 15672:15672
    volumes:
        - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
        - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
    networks:
        - rabbitmq_net
    
  user_service:
    container_name: user_service
    build:
      context: .
      dockerfile: Dockerfile
    image: user_service_image 
    environment:
      DB_HOST: microservicesgorabbitmq-db-1
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: userDB
      DB_PORT: 5432
      DB_SSLMODE: disable
      WAIT_HOSTS: microservicesgorabbitmq-db-1:5432
      WAIT_HOSTS_TIMEOUT: 30
      WAIT_SLEEP_INTERVAL: 10
      WAIT_HOST_CONNECT_TIMEOUT: 30
    # app has dependencies on db and adminer
    # app will not start until db and adminer are up
    depends_on:
      - db
      - adminer
    links:
      - db
    ports:
      - "3000:3000"
    volumes:
      - .:/go/src/app
    networks:
      - app    
    command: sh -c "/wait && /server"\

  merchant_service:
    container_name: merchant_service
    build:
      context: .
      dockerfile: Dockerfile
    image: merchant_service_image
    depends_on:
      - db
      - adminer
    links:
      - db
    ports:
      - "3001:3001"
    volumes:
      - .:/go/src/app
    networks:
      - app    
    command: sh -c "/wait && /server"\

volumes:
  app:
  db-data:

networks:
  rabbitmq_net:
    driver: bridge
